{"version":3,"file":"p__chat__share__index.3d8fd73a.async.js","mappings":"+SACA,EAA8B,sBAA9B,EAAoE,wBAApE,EAA+G,2B,WCmBzGA,EAAgB,WACpB,IAAAC,GAKIC,EAAAA,EAAAA,MAJQC,EAAcF,EAAxBG,SACAC,EAAIJ,EAAJI,KACAC,EAAML,EAANK,OACAC,EAAaN,EAAbM,cAEFC,GACEC,EAAAA,EAAAA,KADMC,EAAOF,EAAPE,QAASC,EAASH,EAATG,UAAWC,EAAUJ,EAAVI,WAAYC,EAAaL,EAAbK,cAAeC,EAAmBN,EAAnBM,oBAGvDC,GASIC,EAAAA,EAAAA,MARFC,EAAgBF,EAAhBE,iBACAC,EAAiBH,EAAjBG,kBACAC,EAAKJ,EAALI,MACAC,EAAWL,EAAXK,YACAC,EAAON,EAAPM,QACAC,EAAGP,EAAHO,IACAC,EAAeR,EAAfQ,gBACAC,EAAQT,EAARS,SAEIC,GAAeC,EAAAA,EAAAA,IAAsBP,GAErCQ,GAAiBC,EAAAA,EAAAA,UAAQ,WAC7B,OAAOvB,IAASwB,EAAAA,GAAWC,MACvBC,EAAAA,GACAC,EAAAA,EACN,GAAG,CAAC3B,IACJ4B,EAAAA,WAAgB,WACV3B,GAAU4B,EAAAA,EAAKC,WAAa7B,GAC9B4B,EAAAA,EAAKE,eAAe9B,EAExB,GAAG,CAACA,EAAQC,IACZ,IAAc8B,EAAeV,IAArBW,KAER,OAAKnC,GAKHoC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACG,EAAAA,EAAI,CAACC,KAAM,EAAGC,UAAWC,EAAsBC,UAAQ,EAAAL,SAAA,EACtDF,EAAAA,EAAAA,MAACG,EAAAA,EAAI,CAACC,KAAM,EAAGG,UAAQ,EAACF,UAAWC,EAAwBJ,SAAA,EACzDM,EAAAA,EAAAA,KAAA,OAAAN,UACEM,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACC,SAAU5B,EAAQoB,SACrBlB,aAAe,EAAfA,EAAiB2B,KAAI,SAACC,EAASC,GAC9B,OACEL,EAAAA,EAAAA,KAACM,EAAAA,EAAW,CACV9C,cAAeA,EAEf+C,aAAcjB,aAAU,EAAVA,EAAYkB,OAC1BC,KAAML,EACNM,SAAS,MACTC,WAAWC,EAAAA,EAAAA,IACT,CACER,QAAS5B,EACTmC,UAAW,IAEbP,GAEF9B,QACE8B,EAAQS,OAASC,EAAAA,GAAYC,WAC7B1C,IACAG,aAAe,EAAfA,EAAiBwC,QAAS,IAAMX,EAElCY,MAAOZ,EACPtC,oBAAqBA,EACrBmD,gBAAgB,EAChBC,iBAAiB,IAnBZC,EAAAA,EAAAA,IAAyBhB,GAsBpC,SAGJJ,EAAAA,EAAAA,KAAA,OAAKzB,IAAKA,QAGZyB,EAAAA,EAAAA,KAACqB,EAAAA,EAAY,CACXC,UAAQ,EACRlD,MAAOA,EACPmD,SAAU9C,EACVC,aAAcA,EACdtB,eAAgBA,EAChBoE,cAAerD,EACfsD,aAAcvD,EACdG,YAAaA,EACbqD,aAAa,4BACbC,gBAAgB,OAGnBhE,IACCqC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,CACRjE,QAASA,EACTC,UAAWA,EACXC,WAAYA,EACZgE,MAAO/D,QA3DNkC,EAAAA,EAAAA,KAAA,OAAAN,SAAK,SAgEhB,EAEA,GAAeoC,EAAAA,EAAAA,YAAW7E,GC7G1B,EARmB,WACjB,OACE+C,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAmBJ,UACjCM,EAAAA,EAAAA,KAAC/C,EAAa,KAGpB,C","sources":["webpack:///./src/pages/chat/share/index.less?4388","webpack:///./src/pages/chat/share/large.tsx","webpack:///./src/pages/chat/share/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chatWrapper\":\"chatWrapper___V2STu\",\"chatContainer\":\"chatContainer___JkSeI\",\"messageContainer\":\"messageContainer___v6SB0\"};","import MessageInput from '@/components/message-input';\nimport MessageItem from '@/components/message-item';\nimport { useClickDrawer } from '@/components/pdf-drawer/hooks';\nimport { MessageType, SharedFrom } from '@/constants/chat';\nimport { useSendButtonDisabled } from '@/pages/chat/hooks';\nimport { Flex, Spin } from 'antd';\nimport React, { forwardRef, useMemo } from 'react';\nimport {\n  useGetSharedChatSearchParams,\n  useSendSharedMessage,\n} from '../shared-hooks';\nimport { buildMessageItemReference } from '../utils';\n\nimport PdfDrawer from '@/components/pdf-drawer';\nimport { useFetchNextConversationSSE } from '@/hooks/chat-hooks';\nimport { useFetchFlowSSE } from '@/hooks/flow-hooks';\nimport i18n from '@/locales/config';\nimport { buildMessageUuidWithRole } from '@/utils/chat';\nimport styles from './index.less';\n\nconst ChatContainer = () => {\n  const {\n    sharedId: conversationId,\n    from,\n    locale,\n    visibleAvatar,\n  } = useGetSharedChatSearchParams();\n  const { visible, hideModal, documentId, selectedChunk, clickDocumentButton } =\n    useClickDrawer();\n\n  const {\n    handlePressEnter,\n    handleInputChange,\n    value,\n    sendLoading,\n    loading,\n    ref,\n    derivedMessages,\n    hasError,\n  } = useSendSharedMessage();\n  const sendDisabled = useSendButtonDisabled(value);\n\n  const useFetchAvatar = useMemo(() => {\n    return from === SharedFrom.Agent\n      ? useFetchFlowSSE\n      : useFetchNextConversationSSE;\n  }, [from]);\n  React.useEffect(() => {\n    if (locale && i18n.language !== locale) {\n      i18n.changeLanguage(locale);\n    }\n  }, [locale, visibleAvatar]);\n  const { data: avatarData } = useFetchAvatar();\n\n  if (!conversationId) {\n    return <div>empty</div>;\n  }\n\n  return (\n    <>\n      <Flex flex={1} className={styles.chatContainer} vertical>\n        <Flex flex={1} vertical className={styles.messageContainer}>\n          <div>\n            <Spin spinning={loading}>\n              {derivedMessages?.map((message, i) => {\n                return (\n                  <MessageItem\n                    visibleAvatar={visibleAvatar}\n                    key={buildMessageUuidWithRole(message)}\n                    avatarDialog={avatarData?.avatar}\n                    item={message}\n                    nickname=\"You\"\n                    reference={buildMessageItemReference(\n                      {\n                        message: derivedMessages,\n                        reference: [],\n                      },\n                      message,\n                    )}\n                    loading={\n                      message.role === MessageType.Assistant &&\n                      sendLoading &&\n                      derivedMessages?.length - 1 === i\n                    }\n                    index={i}\n                    clickDocumentButton={clickDocumentButton}\n                    showLikeButton={false}\n                    showLoudspeaker={false}\n                  ></MessageItem>\n                );\n              })}\n            </Spin>\n          </div>\n          <div ref={ref} />\n        </Flex>\n\n        <MessageInput\n          isShared\n          value={value}\n          disabled={hasError}\n          sendDisabled={sendDisabled}\n          conversationId={conversationId}\n          onInputChange={handleInputChange}\n          onPressEnter={handlePressEnter}\n          sendLoading={sendLoading}\n          uploadMethod=\"external_upload_and_parse\"\n          showUploadIcon={false}\n        ></MessageInput>\n      </Flex>\n      {visible && (\n        <PdfDrawer\n          visible={visible}\n          hideModal={hideModal}\n          documentId={documentId}\n          chunk={selectedChunk}\n        ></PdfDrawer>\n      )}\n    </>\n  );\n};\n\nexport default forwardRef(ChatContainer);\n","import ChatContainer from './large';\n\nimport styles from './index.less';\n\nconst SharedChat = () => {\n  return (\n    <div className={styles.chatWrapper}>\n      <ChatContainer></ChatContainer>\n    </div>\n  );\n};\n\nexport default SharedChat;\n"],"names":["ChatContainer","_useGetSharedChatSear","useGetSharedChatSearchParams","conversationId","sharedId","from","locale","visibleAvatar","_useClickDrawer","useClickDrawer","visible","hideModal","documentId","selectedChunk","clickDocumentButton","_useSendSharedMessage","useSendSharedMessage","handlePressEnter","handleInputChange","value","sendLoading","loading","ref","derivedMessages","hasError","sendDisabled","useSendButtonDisabled","useFetchAvatar","useMemo","SharedFrom","Agent","useFetchFlowSSE","useFetchNextConversationSSE","React","i18n","language","changeLanguage","avatarData","data","_jsxs","_Fragment","children","Flex","flex","className","styles","vertical","_jsx","Spin","spinning","map","message","i","MessageItem","avatarDialog","avatar","item","nickname","reference","buildMessageItemReference","role","MessageType","Assistant","length","index","showLikeButton","showLoudspeaker","buildMessageUuidWithRole","MessageInput","isShared","disabled","onInputChange","onPressEnter","uploadMethod","showUploadIcon","PdfDrawer","chunk","forwardRef"],"sourceRoot":""}