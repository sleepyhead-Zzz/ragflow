{"version":3,"file":"p__file-manager__index.fac064be.async.js","mappings":"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","sources":["webpack:///./src/components/file-upload-modal/index.less?4e00","webpack:///./src/components/file-upload-modal/index.tsx","webpack:///./src/components/new-document-link.tsx","webpack:///./src/components/rename-modal/index.tsx","webpack:///./src/pages/file-manager/hooks.ts","webpack:///./src/pages/file-manager/action-cell/index.tsx","webpack:///./src/pages/file-manager/index.less?4007","webpack:///./src/pages/file-manager/file-toolbar.tsx","webpack:///./src/pages/file-manager/connect-to-knowledge-modal/index.tsx","webpack:///./src/pages/file-manager/folder-create-modal/index.tsx","webpack:///./src/pages/file-manager/move-file-modal/async-tree-select.tsx","webpack:///./src/pages/file-manager/move-file-modal/index.tsx","webpack:///./src/pages/file-manager/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"uploader\":\"uploader___ezBcw\",\"uploadLimit\":\"uploadLimit___bpygu\"};","import { useTranslate } from '@/hooks/common-hooks';\nimport { IModalProps } from '@/interfaces/common';\nimport { InboxOutlined } from '@ant-design/icons';\nimport {\n  Checkbox,\n  Flex,\n  Modal,\n  Progress,\n  Segmented,\n  Tabs,\n  TabsProps,\n  Upload,\n  UploadFile,\n  UploadProps,\n} from 'antd';\nimport { Dispatch, SetStateAction, useState } from 'react';\n\nimport styles from './index.less';\n\nconst { Dragger } = Upload;\n\nconst FileUpload = ({\n  directory,\n  fileList,\n  setFileList,\n  uploadProgress,\n}: {\n  directory: boolean;\n  fileList: UploadFile[];\n  setFileList: Dispatch<SetStateAction<UploadFile[]>>;\n  uploadProgress?: number;\n}) => {\n  const { t } = useTranslate('fileManager');\n  const props: UploadProps = {\n    multiple: true,\n    onRemove: (file) => {\n      const index = fileList.indexOf(file);\n      const newFileList = fileList.slice();\n      newFileList.splice(index, 1);\n      setFileList(newFileList);\n    },\n    beforeUpload: (file: UploadFile) => {\n      setFileList((pre) => {\n        return [...pre, file];\n      });\n\n      return false;\n    },\n    directory,\n    fileList,\n    progress: {\n      strokeWidth: 2,\n    },\n  };\n\n  return (\n    <>\n      <Progress percent={uploadProgress} showInfo={false} />\n      <Dragger {...props} className={styles.uploader}>\n        <p className=\"ant-upload-drag-icon\">\n          <InboxOutlined />\n        </p>\n        <p className=\"ant-upload-text\">{t('uploadTitle')}</p>\n        <p className=\"ant-upload-hint\">{t('uploadDescription')}</p>\n        {false && <p className={styles.uploadLimit}>{t('uploadLimit')}</p>}\n      </Dragger>\n    </>\n  );\n};\n\ninterface IFileUploadModalProps extends IModalProps<boolean | UploadFile[]> {\n  uploadFileList?: UploadFile[];\n  setUploadFileList?: Dispatch<SetStateAction<UploadFile[]>>;\n  uploadProgress?: number;\n  setUploadProgress?: Dispatch<SetStateAction<number>>;\n}\n\nconst FileUploadModal = ({\n  visible,\n  hideModal,\n  loading,\n  onOk: onFileUploadOk,\n  uploadFileList: fileList,\n  setUploadFileList: setFileList,\n  uploadProgress,\n  setUploadProgress,\n}: IFileUploadModalProps) => {\n  const { t } = useTranslate('fileManager');\n  const [value, setValue] = useState<string | number>('local');\n  const [parseOnCreation, setParseOnCreation] = useState(false);\n  const [currentFileList, setCurrentFileList] = useState<UploadFile[]>([]);\n  const [directoryFileList, setDirectoryFileList] = useState<UploadFile[]>([]);\n\n  const clearFileList = () => {\n    if (setFileList) {\n      setFileList([]);\n      setUploadProgress?.(0);\n    } else {\n      setCurrentFileList([]);\n    }\n    setDirectoryFileList([]);\n  };\n\n  const onOk = async () => {\n    if (uploadProgress === 100) {\n      hideModal?.();\n      return;\n    }\n\n    const ret = await onFileUploadOk?.(\n      fileList ? parseOnCreation : [...currentFileList, ...directoryFileList],\n    );\n    return ret;\n  };\n\n  const afterClose = () => {\n    clearFileList();\n  };\n\n  const items: TabsProps['items'] = [\n    {\n      key: '1',\n      label: t('file'),\n      children: (\n        <FileUpload\n          directory={false}\n          fileList={fileList ? fileList : currentFileList}\n          setFileList={setFileList ? setFileList : setCurrentFileList}\n          uploadProgress={uploadProgress}\n        ></FileUpload>\n      ),\n    },\n    {\n      key: '2',\n      label: t('directory'),\n      children: (\n        <FileUpload\n          directory\n          fileList={directoryFileList}\n          setFileList={setDirectoryFileList}\n          uploadProgress={uploadProgress}\n        ></FileUpload>\n      ),\n    },\n  ];\n\n  return (\n    <>\n      <Modal\n        title={t('uploadFile')}\n        open={visible}\n        onOk={onOk}\n        onCancel={hideModal}\n        confirmLoading={loading}\n        afterClose={afterClose}\n      >\n        <Flex gap={'large'} vertical>\n          <Segmented\n            options={[\n              { label: t('local'), value: 'local' },\n              { label: t('s3'), value: 's3' },\n            ]}\n            block\n            value={value}\n            onChange={setValue}\n          />\n          {value === 'local' ? (\n            <>\n              <Checkbox\n                checked={parseOnCreation}\n                onChange={(e) => setParseOnCreation(e.target.checked)}\n              >\n                {t('parseOnCreation')}\n              </Checkbox>\n              <Tabs defaultActiveKey=\"1\" items={items} />\n            </>\n          ) : (\n            t('comingSoon', { keyPrefix: 'common' })\n          )}\n        </Flex>\n      </Modal>\n    </>\n  );\n};\n\nexport default FileUploadModal;\n","import {\n  getExtension,\n  isSupportedPreviewDocumentType,\n} from '@/utils/document-util';\nimport React from 'react';\n\ninterface IProps extends React.PropsWithChildren {\n  link?: string;\n  preventDefault?: boolean;\n  color?: string;\n  documentName: string;\n  documentId?: string;\n  prefix?: string;\n}\n\nconst NewDocumentLink = ({\n  children,\n  link,\n  preventDefault = false,\n  color = 'rgb(15, 79, 170)',\n  documentId,\n  documentName,\n  prefix = 'file',\n}: IProps) => {\n  let nextLink = link;\n  const extension = getExtension(documentName);\n  if (!link) {\n    nextLink = `/document/${documentId}?ext=${extension}&prefix=${prefix}`;\n  }\n\n  return (\n    <a\n      target=\"_blank\"\n      onClick={\n        !preventDefault || isSupportedPreviewDocumentType(extension)\n          ? undefined\n          : (e) => e.preventDefault()\n      }\n      href={nextLink}\n      rel=\"noreferrer\"\n      style={{ color, wordBreak: 'break-all' }}\n    >\n      {children}\n    </a>\n  );\n};\n\nexport default NewDocumentLink;\n","import { useTranslate } from '@/hooks/common-hooks';\nimport { Form, Input, Modal } from 'antd';\nimport { useEffect } from 'react';\nimport { IModalManagerChildrenProps } from '../modal-manager';\n\ninterface IProps extends Omit<IModalManagerChildrenProps, 'showModal'> {\n  loading: boolean;\n  initialName: string;\n  onOk: (name: string) => void;\n  showModal?(): void;\n}\n\nconst RenameModal = ({\n  visible,\n  hideModal,\n  loading,\n  initialName,\n  onOk,\n}: IProps) => {\n  const [form] = Form.useForm();\n  const { t } = useTranslate('common');\n\n  type FieldType = {\n    name?: string;\n  };\n\n  const handleOk = async () => {\n    const ret = await form.validateFields();\n\n    return onOk(ret.name);\n  };\n\n  const handleCancel = () => {\n    hideModal();\n  };\n\n  const onFinish = (values: any) => {\n    console.log('Success:', values);\n  };\n\n  const onFinishFailed = (errorInfo: any) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  useEffect(() => {\n    if (visible) {\n      form.setFieldValue('name', initialName);\n    }\n  }, [initialName, form, visible]);\n\n  return (\n    <Modal\n      title={t('rename')}\n      open={visible}\n      onOk={handleOk}\n      onCancel={handleCancel}\n      okButtonProps={{ loading }}\n      confirmLoading={loading}\n    >\n      <Form\n        name=\"basic\"\n        labelCol={{ span: 4 }}\n        wrapperCol={{ span: 20 }}\n        style={{ maxWidth: 600 }}\n        onFinish={onFinish}\n        onFinishFailed={onFinishFailed}\n        autoComplete=\"off\"\n        form={form}\n      >\n        <Form.Item<FieldType>\n          label={t('name')}\n          name=\"name\"\n          rules={[{ required: true, message: t('namePlaceholder') }]}\n        >\n          <Input />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default RenameModal;\n","import { useSetModalState, useShowDeleteConfirm } from '@/hooks/common-hooks';\nimport {\n  useConnectToKnowledge,\n  useCreateFolder,\n  useDeleteFile,\n  useFetchParentFolderList,\n  useMoveFile,\n  useRenameFile,\n  useUploadFile,\n} from '@/hooks/file-manager-hooks';\nimport { IFile } from '@/interfaces/database/file-manager';\nimport { TableRowSelection } from 'antd/es/table/interface';\nimport { UploadFile } from 'antd/lib';\nimport { useCallback, useMemo, useState } from 'react';\nimport { useNavigate, useSearchParams } from 'umi';\n\nexport const useGetFolderId = () => {\n  const [searchParams] = useSearchParams();\n  const id = searchParams.get('folderId') as string;\n\n  return id ?? '';\n};\n\nexport const useGetRowSelection = () => {\n  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);\n\n  const rowSelection: TableRowSelection<IFile> = {\n    selectedRowKeys,\n    getCheckboxProps: (record) => {\n      return { disabled: record.source_type === 'knowledgebase' };\n    },\n    onChange: (newSelectedRowKeys: React.Key[]) => {\n      setSelectedRowKeys(newSelectedRowKeys);\n    },\n  };\n\n  return { rowSelection, setSelectedRowKeys };\n};\n\nexport const useNavigateToOtherFolder = () => {\n  const navigate = useNavigate();\n  const navigateToOtherFolder = useCallback(\n    (folderId: string) => {\n      navigate(`/file?folderId=${folderId}`);\n    },\n    [navigate],\n  );\n\n  return navigateToOtherFolder;\n};\n\nexport const useRenameCurrentFile = () => {\n  const [file, setFile] = useState<IFile>({} as IFile);\n  const {\n    visible: fileRenameVisible,\n    hideModal: hideFileRenameModal,\n    showModal: showFileRenameModal,\n  } = useSetModalState();\n  const { renameFile, loading } = useRenameFile();\n\n  const onFileRenameOk = useCallback(\n    async (name: string) => {\n      const ret = await renameFile({\n        fileId: file.id,\n        name,\n      });\n\n      if (ret === 0) {\n        hideFileRenameModal();\n      }\n    },\n    [renameFile, file, hideFileRenameModal],\n  );\n\n  const handleShowFileRenameModal = useCallback(\n    async (record: IFile) => {\n      setFile(record);\n      showFileRenameModal();\n    },\n    [showFileRenameModal],\n  );\n\n  return {\n    fileRenameLoading: loading,\n    initialFileName: file.name,\n    onFileRenameOk,\n    fileRenameVisible,\n    hideFileRenameModal,\n    showFileRenameModal: handleShowFileRenameModal,\n  };\n};\n\nexport const useSelectBreadcrumbItems = () => {\n  const parentFolderList = useFetchParentFolderList();\n\n  return parentFolderList.length === 1\n    ? []\n    : parentFolderList.map((x) => ({\n        title: x.name === '/' ? 'root' : x.name,\n        path: `/file?folderId=${x.id}`,\n      }));\n};\n\nexport const useHandleCreateFolder = () => {\n  const {\n    visible: folderCreateModalVisible,\n    hideModal: hideFolderCreateModal,\n    showModal: showFolderCreateModal,\n  } = useSetModalState();\n  const { createFolder, loading } = useCreateFolder();\n  const id = useGetFolderId();\n\n  const onFolderCreateOk = useCallback(\n    async (name: string) => {\n      const ret = await createFolder({ parentId: id, name });\n\n      if (ret === 0) {\n        hideFolderCreateModal();\n      }\n    },\n    [createFolder, hideFolderCreateModal, id],\n  );\n\n  return {\n    folderCreateLoading: loading,\n    onFolderCreateOk,\n    folderCreateModalVisible,\n    hideFolderCreateModal,\n    showFolderCreateModal,\n  };\n};\n\nexport const useHandleDeleteFile = (\n  fileIds: string[],\n  setSelectedRowKeys: (keys: string[]) => void,\n) => {\n  const { deleteFile: removeDocument } = useDeleteFile();\n  const showDeleteConfirm = useShowDeleteConfirm();\n  const parentId = useGetFolderId();\n\n  const handleRemoveFile = () => {\n    showDeleteConfirm({\n      onOk: async () => {\n        const code = await removeDocument({ fileIds, parentId });\n        if (code === 0) {\n          setSelectedRowKeys([]);\n        }\n        return;\n      },\n    });\n  };\n\n  return { handleRemoveFile };\n};\n\nexport const useHandleUploadFile = () => {\n  const {\n    visible: fileUploadVisible,\n    hideModal: hideFileUploadModal,\n    showModal: showFileUploadModal,\n  } = useSetModalState();\n  const { uploadFile, loading } = useUploadFile();\n  const id = useGetFolderId();\n\n  const onFileUploadOk = useCallback(\n    async (fileList: UploadFile[]): Promise<number | undefined> => {\n      if (fileList.length > 0) {\n        const ret: number = await uploadFile({ fileList, parentId: id });\n        if (ret === 0) {\n          hideFileUploadModal();\n        }\n        return ret;\n      }\n    },\n    [uploadFile, hideFileUploadModal, id],\n  );\n\n  return {\n    fileUploadLoading: loading,\n    onFileUploadOk,\n    fileUploadVisible,\n    hideFileUploadModal,\n    showFileUploadModal,\n  };\n};\n\nexport const useHandleConnectToKnowledge = () => {\n  const {\n    visible: connectToKnowledgeVisible,\n    hideModal: hideConnectToKnowledgeModal,\n    showModal: showConnectToKnowledgeModal,\n  } = useSetModalState();\n  const { connectFileToKnowledge: connectToKnowledge, loading } =\n    useConnectToKnowledge();\n  const [record, setRecord] = useState<IFile>({} as IFile);\n\n  const initialValue = useMemo(() => {\n    return Array.isArray(record?.kbs_info)\n      ? record?.kbs_info?.map((x) => x.kb_id)\n      : [];\n  }, [record?.kbs_info]);\n\n  const onConnectToKnowledgeOk = useCallback(\n    async (knowledgeIds: string[]) => {\n      const ret = await connectToKnowledge({\n        fileIds: [record.id],\n        kbIds: knowledgeIds,\n      });\n\n      if (ret === 0) {\n        hideConnectToKnowledgeModal();\n      }\n      return ret;\n    },\n    [connectToKnowledge, hideConnectToKnowledgeModal, record.id],\n  );\n\n  const handleShowConnectToKnowledgeModal = useCallback(\n    (record: IFile) => {\n      setRecord(record);\n      showConnectToKnowledgeModal();\n    },\n    [showConnectToKnowledgeModal],\n  );\n\n  return {\n    initialValue,\n    connectToKnowledgeLoading: loading,\n    onConnectToKnowledgeOk,\n    connectToKnowledgeVisible,\n    hideConnectToKnowledgeModal,\n    showConnectToKnowledgeModal: handleShowConnectToKnowledgeModal,\n  };\n};\n\nexport const useHandleBreadcrumbClick = () => {\n  const navigate = useNavigate();\n\n  const handleBreadcrumbClick = useCallback(\n    (path?: string) => {\n      if (path) {\n        navigate(path);\n      }\n    },\n    [navigate],\n  );\n\n  return { handleBreadcrumbClick };\n};\n\nexport const useHandleMoveFile = (\n  setSelectedRowKeys: (keys: string[]) => void,\n) => {\n  const {\n    visible: moveFileVisible,\n    hideModal: hideMoveFileModal,\n    showModal: showMoveFileModal,\n  } = useSetModalState();\n  const { moveFile, loading } = useMoveFile();\n  const [sourceFileIds, setSourceFileIds] = useState<string[]>([]);\n\n  const onMoveFileOk = useCallback(\n    async (targetFolderId: string) => {\n      const ret = await moveFile({\n        src_file_ids: sourceFileIds,\n        dest_file_id: targetFolderId,\n      });\n\n      if (ret === 0) {\n        setSelectedRowKeys([]);\n        hideMoveFileModal();\n      }\n      return ret;\n    },\n    [moveFile, hideMoveFileModal, sourceFileIds, setSelectedRowKeys],\n  );\n\n  const handleShowMoveFileModal = useCallback(\n    (ids: string[]) => {\n      setSourceFileIds(ids);\n      showMoveFileModal();\n    },\n    [showMoveFileModal],\n  );\n\n  return {\n    initialValue: '',\n    moveFileLoading: loading,\n    onMoveFileOk,\n    moveFileVisible,\n    hideMoveFileModal,\n    showMoveFileModal: handleShowMoveFileModal,\n  };\n};\n","import NewDocumentLink from '@/components/new-document-link';\nimport { useTranslate } from '@/hooks/common-hooks';\nimport { useDownloadFile } from '@/hooks/file-manager-hooks';\nimport { IFile } from '@/interfaces/database/file-manager';\nimport {\n  getExtension,\n  isSupportedPreviewDocumentType,\n} from '@/utils/document-util';\nimport {\n  DownloadOutlined,\n  EditOutlined,\n  EyeOutlined,\n  LinkOutlined,\n} from '@ant-design/icons';\nimport { Button, Space, Tooltip } from 'antd';\nimport { FolderInput, Trash2 } from 'lucide-react';\nimport { useHandleDeleteFile } from '../hooks';\n\ninterface IProps {\n  record: IFile;\n  setCurrentRecord: (record: any) => void;\n  showRenameModal: (record: IFile) => void;\n  showMoveFileModal: (ids: string[]) => void;\n  showConnectToKnowledgeModal: (record: IFile) => void;\n  setSelectedRowKeys(keys: string[]): void;\n}\n\nconst ActionCell = ({\n  record,\n  setCurrentRecord,\n  showRenameModal,\n  showConnectToKnowledgeModal,\n  setSelectedRowKeys,\n  showMoveFileModal,\n}: IProps) => {\n  const documentId = record.id;\n  const beingUsed = false;\n  const { t } = useTranslate('fileManager');\n  const { handleRemoveFile } = useHandleDeleteFile(\n    [documentId],\n    setSelectedRowKeys,\n  );\n  const { downloadFile, loading } = useDownloadFile();\n  const extension = getExtension(record.name);\n  const isKnowledgeBase = record.source_type === 'knowledgebase';\n\n  const onDownloadDocument = () => {\n    downloadFile({\n      id: documentId,\n      filename: record.name,\n    });\n  };\n\n  const setRecord = () => {\n    setCurrentRecord(record);\n  };\n\n  const onShowRenameModal = () => {\n    setRecord();\n    showRenameModal(record);\n  };\n\n  const onShowConnectToKnowledgeModal = () => {\n    showConnectToKnowledgeModal(record);\n  };\n\n  const onShowMoveFileModal = () => {\n    showMoveFileModal([documentId]);\n  };\n\n  return (\n    <Space size={0}>\n      {isKnowledgeBase || (\n        <Tooltip title={t('addToKnowledge')}>\n          <Button type=\"text\" onClick={onShowConnectToKnowledgeModal}>\n            <LinkOutlined size={20} />\n          </Button>\n        </Tooltip>\n      )}\n\n      {isKnowledgeBase || (\n        <Tooltip title={t('rename', { keyPrefix: 'common' })}>\n          <Button type=\"text\" disabled={beingUsed} onClick={onShowRenameModal}>\n            <EditOutlined size={20} />\n          </Button>\n        </Tooltip>\n      )}\n      {isKnowledgeBase || (\n        <Tooltip title={t('move', { keyPrefix: 'common' })}>\n          <Button\n            type=\"text\"\n            disabled={beingUsed}\n            onClick={onShowMoveFileModal}\n            className=\"flex items-end\"\n          >\n            <FolderInput className=\"size-4\" />\n          </Button>\n        </Tooltip>\n      )}\n      {isKnowledgeBase || (\n        <Tooltip title={t('delete', { keyPrefix: 'common' })}>\n          <Button\n            type=\"text\"\n            disabled={beingUsed}\n            onClick={handleRemoveFile}\n            className=\"flex items-end\"\n          >\n            <Trash2 className=\"size-4\" />\n          </Button>\n        </Tooltip>\n      )}\n      {record.type !== 'folder' && (\n        <Tooltip title={t('download', { keyPrefix: 'common' })}>\n          <Button\n            type=\"text\"\n            disabled={beingUsed}\n            loading={loading}\n            onClick={onDownloadDocument}\n          >\n            <DownloadOutlined size={20} />\n          </Button>\n        </Tooltip>\n      )}\n      {isSupportedPreviewDocumentType(extension) && (\n        <NewDocumentLink\n          documentId={documentId}\n          documentName={record.name}\n          color=\"black\"\n        >\n          <Tooltip title={t('preview')}>\n            <Button type=\"text\">\n              <EyeOutlined size={20} />\n            </Button>\n          </Tooltip>\n        </NewDocumentLink>\n      )}\n    </Space>\n  );\n};\n\nexport default ActionCell;\n","// extracted by mini-css-extract-plugin\nexport default {\"fileManagerWrapper\":\"fileManagerWrapper___R9Ujv\",\"filter\":\"filter___x1Xt2\",\"deleteIconWrapper\":\"deleteIconWrapper___pgIrY\",\"linkButton\":\"linkButton___Dw8Oi\",\"breadcrumbItemButton\":\"breadcrumbItemButton___qWlv3\"};","import { useTranslate } from '@/hooks/common-hooks';\nimport {\n  IListResult,\n  useFetchParentFolderList,\n} from '@/hooks/file-manager-hooks';\nimport {\n  DownOutlined,\n  FileTextOutlined,\n  FolderOpenOutlined,\n  PlusOutlined,\n  SearchOutlined,\n} from '@ant-design/icons';\nimport {\n  Breadcrumb,\n  BreadcrumbProps,\n  Button,\n  Dropdown,\n  Flex,\n  Input,\n  MenuProps,\n  Space,\n} from 'antd';\nimport { useCallback, useMemo } from 'react';\nimport {\n  useHandleBreadcrumbClick,\n  useHandleDeleteFile,\n  useSelectBreadcrumbItems,\n} from './hooks';\n\nimport { FolderInput, Trash2 } from 'lucide-react';\nimport styles from './index.less';\n\ninterface IProps\n  extends Pick<IListResult, 'searchString' | 'handleInputChange'> {\n  selectedRowKeys: string[];\n  showFolderCreateModal: () => void;\n  showFileUploadModal: () => void;\n  setSelectedRowKeys: (keys: string[]) => void;\n  showMoveFileModal: (ids: string[]) => void;\n}\n\nconst FileToolbar = ({\n  selectedRowKeys,\n  showFolderCreateModal,\n  showFileUploadModal,\n  setSelectedRowKeys,\n  searchString,\n  handleInputChange,\n  showMoveFileModal,\n}: IProps) => {\n  const { t } = useTranslate('knowledgeDetails');\n  const breadcrumbItems = useSelectBreadcrumbItems();\n  const { handleBreadcrumbClick } = useHandleBreadcrumbClick();\n  const parentFolderList = useFetchParentFolderList();\n  const isKnowledgeBase =\n    parentFolderList.at(-1)?.source_type === 'knowledgebase';\n\n  const itemRender: BreadcrumbProps['itemRender'] = (\n    currentRoute,\n    params,\n    items,\n  ) => {\n    const isLast = currentRoute?.path === items[items.length - 1]?.path;\n\n    return isLast ? (\n      <span>{currentRoute.title}</span>\n    ) : (\n      <span\n        className={styles.breadcrumbItemButton}\n        onClick={() => handleBreadcrumbClick(currentRoute.path)}\n      >\n        {currentRoute.title}\n      </span>\n    );\n  };\n\n  const actionItems: MenuProps['items'] = useMemo(() => {\n    return [\n      {\n        key: '1',\n        onClick: showFileUploadModal,\n        label: (\n          <div>\n            <Button type=\"link\">\n              <Space>\n                <FileTextOutlined />\n                {t('uploadFile', { keyPrefix: 'fileManager' })}\n              </Space>\n            </Button>\n          </div>\n        ),\n      },\n      { type: 'divider' },\n      {\n        key: '2',\n        onClick: showFolderCreateModal,\n        label: (\n          <div>\n            <Button type=\"link\">\n              <Space>\n                <FolderOpenOutlined />\n                {t('newFolder', { keyPrefix: 'fileManager' })}\n              </Space>\n            </Button>\n          </div>\n        ),\n      },\n    ];\n  }, [t, showFolderCreateModal, showFileUploadModal]);\n\n  const { handleRemoveFile } = useHandleDeleteFile(\n    selectedRowKeys,\n    setSelectedRowKeys,\n  );\n\n  const handleShowMoveFileModal = useCallback(() => {\n    showMoveFileModal(selectedRowKeys);\n  }, [selectedRowKeys, showMoveFileModal]);\n\n  const disabled = selectedRowKeys.length === 0;\n\n  const items: MenuProps['items'] = useMemo(() => {\n    return [\n      {\n        key: '4',\n        onClick: handleRemoveFile,\n        label: (\n          <Flex gap={10}>\n            <span className=\"flex items-center justify-center\">\n              <Trash2 className=\"size-4\" />\n            </span>\n            <b>{t('delete', { keyPrefix: 'common' })}</b>\n          </Flex>\n        ),\n      },\n      {\n        key: '5',\n        onClick: handleShowMoveFileModal,\n        label: (\n          <Flex gap={10}>\n            <span className=\"flex items-center justify-center\">\n              <FolderInput className=\"size-4\"></FolderInput>\n            </span>\n            <b>{t('move', { keyPrefix: 'common' })}</b>\n          </Flex>\n        ),\n      },\n    ];\n  }, [handleShowMoveFileModal, t, handleRemoveFile]);\n\n  return (\n    <div className={styles.filter}>\n      <Breadcrumb items={breadcrumbItems} itemRender={itemRender} />\n      <Space>\n        {isKnowledgeBase || (\n          <Dropdown\n            menu={{ items }}\n            placement=\"bottom\"\n            arrow={false}\n            disabled={disabled}\n          >\n            <Button>\n              <Space>\n                <b> {t('bulk')}</b>\n                <DownOutlined />\n              </Space>\n            </Button>\n          </Dropdown>\n        )}\n        <Input\n          placeholder={t('searchFiles')}\n          value={searchString}\n          style={{ width: 220 }}\n          allowClear\n          onChange={handleInputChange}\n          prefix={<SearchOutlined />}\n        />\n\n        {isKnowledgeBase || (\n          <Dropdown menu={{ items: actionItems }} trigger={['click']}>\n            <Button type=\"primary\" icon={<PlusOutlined />}>\n              {t('addFile')}\n            </Button>\n          </Dropdown>\n        )}\n      </Space>\n    </div>\n  );\n};\n\nexport default FileToolbar;\n","import { useTranslate } from '@/hooks/common-hooks';\nimport { useFetchKnowledgeList } from '@/hooks/knowledge-hooks';\nimport { IModalProps } from '@/interfaces/common';\nimport { filterOptionsByInput } from '@/utils/common-util';\nimport { Form, Modal, Select } from 'antd';\nimport { useEffect } from 'react';\n\nconst ConnectToKnowledgeModal = ({\n  visible,\n  hideModal,\n  onOk,\n  initialValue,\n  loading,\n}: IModalProps<string[]> & { initialValue: string[] }) => {\n  const [form] = Form.useForm();\n  const { list } = useFetchKnowledgeList();\n  const { t } = useTranslate('fileManager');\n\n  const options = list?.map((item) => ({\n    label: item.name,\n    value: item.id,\n  }));\n\n  const handleOk = async () => {\n    const values = await form.getFieldsValue();\n    const knowledgeIds = values.knowledgeIds ?? [];\n    return onOk?.(knowledgeIds);\n  };\n\n  useEffect(() => {\n    if (visible) {\n      form.setFieldValue('knowledgeIds', initialValue);\n    }\n  }, [visible, initialValue, form]);\n\n  return (\n    <Modal\n      title={t('addToKnowledge')}\n      open={visible}\n      onOk={handleOk}\n      onCancel={hideModal}\n      confirmLoading={loading}\n    >\n      <Form form={form}>\n        <Form.Item name=\"knowledgeIds\" noStyle>\n          <Select\n            mode=\"multiple\"\n            allowClear\n            showSearch\n            style={{ width: '100%' }}\n            placeholder={t('pleaseSelect')}\n            options={options}\n            optionFilterProp=\"children\"\n            filterOption={filterOptionsByInput}\n          />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default ConnectToKnowledgeModal;\n","import { IModalManagerChildrenProps } from '@/components/modal-manager';\nimport { useTranslate } from '@/hooks/common-hooks';\nimport { Form, Input, Modal } from 'antd';\n\ninterface IProps extends Omit<IModalManagerChildrenProps, 'showModal'> {\n  loading: boolean;\n  onOk: (name: string) => void;\n}\n\nconst FolderCreateModal = ({ visible, hideModal, loading, onOk }: IProps) => {\n  const [form] = Form.useForm();\n  const { t } = useTranslate('common');\n\n  type FieldType = {\n    name?: string;\n  };\n\n  const handleOk = async () => {\n    const ret = await form.validateFields();\n\n    return onOk(ret.name);\n  };\n\n  return (\n    <Modal\n      title={t('newFolder', { keyPrefix: 'fileManager' })}\n      open={visible}\n      onOk={handleOk}\n      onCancel={hideModal}\n      okButtonProps={{ loading }}\n      confirmLoading={loading}\n    >\n      <Form\n        name=\"basic\"\n        labelCol={{ span: 4 }}\n        wrapperCol={{ span: 20 }}\n        style={{ maxWidth: 600 }}\n        autoComplete=\"off\"\n        form={form}\n      >\n        <Form.Item<FieldType>\n          label={t('name')}\n          name=\"name\"\n          rules={[{ required: true, message: t('namePlaceholder') }]}\n        >\n          <Input />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default FolderCreateModal;\n","import { useFetchPureFileList } from '@/hooks/file-manager-hooks';\nimport { IFile } from '@/interfaces/database/file-manager';\nimport type { GetProp, TreeSelectProps } from 'antd';\nimport { TreeSelect } from 'antd';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ntype DefaultOptionType = GetProp<TreeSelectProps, 'treeData'>[number];\n\ninterface IProps {\n  value?: string;\n  onChange?: (value: string) => void;\n}\n\nconst AsyncTreeSelect = ({ value, onChange }: IProps) => {\n  const { t } = useTranslation();\n  const { fetchList } = useFetchPureFileList();\n  const [treeData, setTreeData] = useState<Omit<DefaultOptionType, 'label'>[]>(\n    [],\n  );\n\n  const onLoadData: TreeSelectProps['loadData'] = useCallback(\n    async ({ id }) => {\n      const ret = await fetchList(id);\n      if (ret.code === 0) {\n        setTreeData((tree) => {\n          return tree.concat(\n            ret.data.files\n              .filter((x: IFile) => x.type === 'folder')\n              .map((x: IFile) => ({\n                id: x.id,\n                pId: x.parent_id,\n                value: x.id,\n                title: x.name,\n                isLeaf:\n                  typeof x.has_child_folder === 'boolean'\n                    ? !x.has_child_folder\n                    : false,\n              })),\n          );\n        });\n      }\n    },\n    [fetchList],\n  );\n\n  const handleChange = (newValue: string) => {\n    onChange?.(newValue);\n  };\n\n  useEffect(() => {\n    onLoadData?.({ id: '', props: '' });\n  }, [onLoadData]);\n\n  return (\n    <TreeSelect\n      treeDataSimpleMode\n      style={{ width: '100%' }}\n      value={value}\n      dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n      placeholder={t('fileManager.pleaseSelect')}\n      onChange={handleChange}\n      loadData={onLoadData}\n      treeData={treeData}\n    />\n  );\n};\n\nexport default AsyncTreeSelect;\n","import { IModalManagerChildrenProps } from '@/components/modal-manager';\nimport { useTranslate } from '@/hooks/common-hooks';\nimport { Form, Modal } from 'antd';\nimport AsyncTreeSelect from './async-tree-select';\n\ninterface IProps extends Omit<IModalManagerChildrenProps, 'showModal'> {\n  loading: boolean;\n  onOk: (id: string) => void;\n}\n\nconst FileMovingModal = ({ visible, hideModal, loading, onOk }: IProps) => {\n  const [form] = Form.useForm();\n  const { t } = useTranslate('fileManager');\n\n  type FieldType = {\n    name?: string;\n  };\n\n  const handleOk = async () => {\n    const ret = await form.validateFields();\n\n    return onOk(ret.name);\n  };\n\n  return (\n    <Modal\n      title={t('move', { keyPrefix: 'common' })}\n      open={visible}\n      onOk={handleOk}\n      onCancel={hideModal}\n      okButtonProps={{ loading }}\n      confirmLoading={loading}\n      width={600}\n    >\n      <Form\n        name=\"basic\"\n        labelCol={{ span: 6 }}\n        wrapperCol={{ span: 18 }}\n        autoComplete=\"off\"\n        form={form}\n      >\n        <Form.Item<FieldType>\n          label={t('destinationFolder')}\n          name=\"name\"\n          rules={[{ required: true, message: t('pleaseSelect') }]}\n        >\n          <AsyncTreeSelect></AsyncTreeSelect>\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n\nexport default FileMovingModal;\n","import { useFetchFileList } from '@/hooks/file-manager-hooks';\nimport { IFile } from '@/interfaces/database/file-manager';\nimport { formatDate } from '@/utils/date';\nimport { Button, Flex, Space, Table, Tag, Typography } from 'antd';\nimport { ColumnsType } from 'antd/es/table';\nimport ActionCell from './action-cell';\nimport FileToolbar from './file-toolbar';\nimport {\n  useGetRowSelection,\n  useHandleConnectToKnowledge,\n  useHandleCreateFolder,\n  useHandleMoveFile,\n  useHandleUploadFile,\n  useNavigateToOtherFolder,\n  useRenameCurrentFile,\n} from './hooks';\n\nimport FileUploadModal from '@/components/file-upload-modal';\nimport RenameModal from '@/components/rename-modal';\nimport SvgIcon from '@/components/svg-icon';\nimport { useTranslate } from '@/hooks/common-hooks';\nimport { formatNumberWithThousandsSeparator } from '@/utils/common-util';\nimport { getExtension } from '@/utils/document-util';\nimport ConnectToKnowledgeModal from './connect-to-knowledge-modal';\nimport FolderCreateModal from './folder-create-modal';\nimport styles from './index.less';\nimport FileMovingModal from './move-file-modal';\n\nconst { Text } = Typography;\n\nconst FileManager = () => {\n  const { t } = useTranslate('fileManager');\n  // const fileList = useSelectFileList();\n  const { rowSelection, setSelectedRowKeys } = useGetRowSelection();\n  const navigateToOtherFolder = useNavigateToOtherFolder();\n  const {\n    fileRenameVisible,\n    fileRenameLoading,\n    hideFileRenameModal,\n    showFileRenameModal,\n    initialFileName,\n    onFileRenameOk,\n  } = useRenameCurrentFile();\n  const {\n    folderCreateModalVisible,\n    showFolderCreateModal,\n    hideFolderCreateModal,\n    folderCreateLoading,\n    onFolderCreateOk,\n  } = useHandleCreateFolder();\n  const {\n    fileUploadVisible,\n    hideFileUploadModal,\n    showFileUploadModal,\n    fileUploadLoading,\n    onFileUploadOk,\n  } = useHandleUploadFile();\n  const {\n    connectToKnowledgeVisible,\n    hideConnectToKnowledgeModal,\n    showConnectToKnowledgeModal,\n    onConnectToKnowledgeOk,\n    initialValue,\n    connectToKnowledgeLoading,\n  } = useHandleConnectToKnowledge();\n  const {\n    showMoveFileModal,\n    moveFileVisible,\n    onMoveFileOk,\n    hideMoveFileModal,\n    moveFileLoading,\n  } = useHandleMoveFile(setSelectedRowKeys);\n  const { pagination, data, searchString, handleInputChange, loading } =\n    useFetchFileList();\n  const columns: ColumnsType<IFile> = [\n    {\n      title: t('name'),\n      dataIndex: 'name',\n      key: 'name',\n      fixed: 'left',\n      render(value, record) {\n        return (\n          <Flex gap={10} align=\"center\">\n            <SvgIcon\n              name={`file-icon/${record.type === 'folder' ? 'folder' : getExtension(value)}`}\n              width={24}\n            ></SvgIcon>\n            {record.type === 'folder' ? (\n              <Button\n                type={'link'}\n                className={styles.linkButton}\n                onClick={() => navigateToOtherFolder(record.id)}\n              >\n                <Text ellipsis={{ tooltip: value }}>{value}</Text>\n              </Button>\n            ) : (\n              <Text ellipsis={{ tooltip: value }}>{value}</Text>\n            )}\n          </Flex>\n        );\n      },\n    },\n    {\n      title: t('uploadDate'),\n      dataIndex: 'create_time',\n      key: 'create_time',\n      render(text) {\n        return formatDate(text);\n      },\n    },\n    {\n      title: t('size'),\n      dataIndex: 'size',\n      key: 'size',\n      render(value) {\n        return (\n          formatNumberWithThousandsSeparator((value / 1024).toFixed(2)) + ' KB'\n        );\n      },\n    },\n    {\n      title: t('knowledgeBase'),\n      dataIndex: 'kbs_info',\n      key: 'kbs_info',\n      render(value) {\n        return Array.isArray(value) ? (\n          <Space wrap>\n            {value?.map((x) => (\n              <Tag color=\"blue\" key={x.kb_id}>\n                {x.kb_name}\n              </Tag>\n            ))}\n          </Space>\n        ) : (\n          ''\n        );\n      },\n    },\n    {\n      title: t('action'),\n      dataIndex: 'action',\n      key: 'action',\n      render: (text, record) => (\n        <ActionCell\n          record={record}\n          setCurrentRecord={(record: any) => {\n            console.info(record);\n          }}\n          showRenameModal={showFileRenameModal}\n          showMoveFileModal={showMoveFileModal}\n          showConnectToKnowledgeModal={showConnectToKnowledgeModal}\n          setSelectedRowKeys={setSelectedRowKeys}\n        ></ActionCell>\n      ),\n    },\n  ];\n\n  return (\n    <section className={styles.fileManagerWrapper}>\n      <FileToolbar\n        searchString={searchString}\n        handleInputChange={handleInputChange}\n        selectedRowKeys={rowSelection.selectedRowKeys as string[]}\n        showFolderCreateModal={showFolderCreateModal}\n        showFileUploadModal={showFileUploadModal}\n        setSelectedRowKeys={setSelectedRowKeys}\n        showMoveFileModal={showMoveFileModal}\n      ></FileToolbar>\n      <Table\n        dataSource={data?.files}\n        columns={columns}\n        rowKey={'id'}\n        rowSelection={rowSelection}\n        loading={loading}\n        pagination={pagination}\n        scroll={{ scrollToFirstRowOnChange: true, x: '100%' }}\n      />\n      <RenameModal\n        visible={fileRenameVisible}\n        hideModal={hideFileRenameModal}\n        onOk={onFileRenameOk}\n        initialName={initialFileName}\n        loading={fileRenameLoading}\n      ></RenameModal>\n      <FolderCreateModal\n        loading={folderCreateLoading}\n        visible={folderCreateModalVisible}\n        hideModal={hideFolderCreateModal}\n        onOk={onFolderCreateOk}\n      ></FolderCreateModal>\n      <FileUploadModal\n        visible={fileUploadVisible}\n        hideModal={hideFileUploadModal}\n        loading={fileUploadLoading}\n        onOk={onFileUploadOk}\n      ></FileUploadModal>\n      <ConnectToKnowledgeModal\n        initialValue={initialValue}\n        visible={connectToKnowledgeVisible}\n        hideModal={hideConnectToKnowledgeModal}\n        onOk={onConnectToKnowledgeOk}\n        loading={connectToKnowledgeLoading}\n      ></ConnectToKnowledgeModal>\n      {moveFileVisible && (\n        <FileMovingModal\n          visible={moveFileVisible}\n          hideModal={hideMoveFileModal}\n          onOk={onMoveFileOk}\n          loading={moveFileLoading}\n        ></FileMovingModal>\n      )}\n    </section>\n  );\n};\n\nexport default FileManager;\n"],"names":["Dragger","Upload","FileUpload","_ref","directory","fileList","setFileList","uploadProgress","t","useTranslate","props","multiple","onRemove","file","index","indexOf","newFileList","slice","splice","beforeUpload","pre","concat","_toConsumableArray","progress","strokeWidth","_jsxs","_Fragment","children","_jsx","Progress","percent","showInfo","_objectSpread","className","styles","InboxOutlined","_ref2","visible","hideModal","loading","onFileUploadOk","onOk","uploadFileList","setUploadFileList","setUploadProgress","_useState","useState","_useState2","_slicedToArray","value","setValue","_useState3","_useState4","parseOnCreation","setParseOnCreation","_useState5","_useState6","currentFileList","setCurrentFileList","_useState7","_useState8","directoryFileList","setDirectoryFileList","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","ret","wrap","_context","prev","next","abrupt","sent","stop","apply","arguments","items","key","label","Modal","title","open","onCancel","confirmLoading","afterClose","Flex","gap","vertical","Segmented","options","block","onChange","Checkbox","checked","e","target","Tabs","defaultActiveKey","keyPrefix","link","_ref$preventDefault","preventDefault","_ref$color","color","documentId","documentName","_ref$prefix","prefix","nextLink","extension","getExtension","onClick","isSupportedPreviewDocumentType","undefined","href","rel","style","wordBreak","initialName","_Form$useForm","Form","useForm","form","handleOk","validateFields","name","useEffect","setFieldValue","okButtonProps","labelCol","span","wrapperCol","maxWidth","onFinish","values","console","log","onFinishFailed","errorInfo","autoComplete","Item","rules","required","message","Input","useGetFolderId","_useSearchParams","useSearchParams","id","get","useHandleDeleteFile","fileIds","setSelectedRowKeys","removeDocument","useDeleteFile","deleteFile","showDeleteConfirm","useShowDeleteConfirm","parentId","handleRemoveFile","_onOk","_callee4","_context4","record","setCurrentRecord","showRenameModal","showConnectToKnowledgeModal","showMoveFileModal","beingUsed","_useDownloadFile","useDownloadFile","downloadFile","isKnowledgeBase","source_type","Space","size","Tooltip","Button","type","LinkOutlined","disabled","EditOutlined","FolderInput","Trash2","filename","DownloadOutlined","NewDocumentLink","EyeOutlined","_parentFolderList$at","navigate","selectedRowKeys","showFolderCreateModal","showFileUploadModal","searchString","handleInputChange","breadcrumbItems","parentFolderList","useFetchParentFolderList","length","map","x","path","useSelectBreadcrumbItems","handleBreadcrumbClick","useNavigate","useCallback","at","actionItems","useMemo","FileTextOutlined","FolderOpenOutlined","handleShowMoveFileModal","Breadcrumb","itemRender","currentRoute","params","_items","Dropdown","menu","placement","arrow","DownOutlined","placeholder","width","allowClear","SearchOutlined","trigger","icon","PlusOutlined","initialValue","list","useFetchKnowledgeList","item","_values$knowledgeIds","knowledgeIds","getFieldsValue","noStyle","Select","mode","showSearch","optionFilterProp","filterOption","filterOptionsByInput","useTranslation","fetchList","useFetchPureFileList","treeData","setTreeData","onLoadData","code","tree","data","files","filter","pId","parent_id","isLeaf","has_child_folder","_x","TreeSelect","treeDataSimpleMode","dropdownStyle","maxHeight","overflow","newValue","loadData","AsyncTreeSelect","Text","Typography","_useGetRowSelection","rowSelection","getCheckboxProps","newSelectedRowKeys","useGetRowSelection","navigateToOtherFolder","folderId","_useRenameCurrentFile","setFile","_useSetModalState","useSetModalState","fileRenameVisible","hideFileRenameModal","showFileRenameModal","showModal","_useRenameFile","useRenameFile","renameFile","onFileRenameOk","fileId","handleShowFileRenameModal","_callee2","_context2","_x2","fileRenameLoading","initialFileName","useRenameCurrentFile","_useHandleCreateFolde","_useSetModalState2","folderCreateModalVisible","hideFolderCreateModal","_useCreateFolder","useCreateFolder","createFolder","onFolderCreateOk","_callee3","_context3","_x3","folderCreateLoading","useHandleCreateFolder","_useHandleUploadFile","_useSetModalState3","fileUploadVisible","hideFileUploadModal","_useUploadFile","useUploadFile","uploadFile","_ref4","_callee5","_context5","_x4","fileUploadLoading","useHandleUploadFile","_useHandleConnectToKn","_useSetModalState4","connectToKnowledgeVisible","hideConnectToKnowledgeModal","_useConnectToKnowledg","useConnectToKnowledge","connectToKnowledge","connectFileToKnowledge","setRecord","_record$kbs_info","Array","isArray","kbs_info","kb_id","onConnectToKnowledgeOk","_ref5","_callee6","_context6","kbIds","_x5","handleShowConnectToKnowledgeModal","connectToKnowledgeLoading","useHandleConnectToKnowledge","_useHandleMoveFile","_useSetModalState5","moveFileVisible","hideMoveFileModal","_useMoveFile","useMoveFile","moveFile","sourceFileIds","setSourceFileIds","onMoveFileOk","_ref6","_callee7","targetFolderId","_context7","src_file_ids","dest_file_id","_x6","ids","moveFileLoading","useHandleMoveFile","_useFetchFileList","useFetchFileList","pagination","columns","dataIndex","fixed","render","align","SvgIcon","ellipsis","tooltip","text","formatDate","formatNumberWithThousandsSeparator","toFixed","Tag","kb_name","ActionCell","info","FileToolbar","Table","dataSource","rowKey","scroll","scrollToFirstRowOnChange","RenameModal","FolderCreateModal","FileUploadModal","ConnectToKnowledgeModal","FileMovingModal"],"sourceRoot":""}